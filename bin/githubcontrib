#!/usr/bin/env node

var LAYOUT_TABLE    = 'lib/strategies/layout_strategies/table.js';
var LAYOUT_JSON     = 'lib/strategies/layout_strategies/json.js';
var FILTER_STRATEGY = 'lib/strategies/filter_strategies/login.js';
var SORT_STRATEGY   = 'lib/strategies/sort_strategies/sort_%s.js';

var args          = require('minimist')(process.argv.slice(2));
var contributors  = require('../lib/contributors');
var sprintf       = require('sprintf-js').sprintf;
var path          = require('path');
var fs            = require('fs');

var lib           = path.dirname(path.dirname( fs.realpathSync(__filename) ));

var logResults    = function (obj) {
  var wantsJSON   = String(args.format).toLowerCase() == "json";

  console.log( wantsJSON ? JSON.stringify(obj) : obj );
};
var logErrors     = function (obj) { console.error(obj); process.exit(1); };


/**
 *  Test call to get contributor list and dump to console
 */
try {
  contributors( validateArgs() )
    .loadAll( args.owner,  args.repository, args.authToken || process.env.GITHUB_API_TOKEN, args.fromDate )
    .then( logResults,logErrors );
} catch( e ) {
  logErrors( e.message );
}



// ************************************
// Internal methods
// ************************************

/**
 * Validate all acceptable arguments..
 */
function validateArgs() {
  var ERROR_ARGS = "both arguments '--repo' and '--owner' are required! ";
  var nonEmptyFn = function (u) { return u.length > 0; };
  var trimFn     = function (u) { return u.trim(); };

  args.owner = args.owner || args.user;
  args.repository = args.repository || args.repo;
  if (!args.repository || !args.owner) throw new Error(ERROR_ARGS);

  args.sortBy    = args.sortBy || 'contributions';
  args.sortOrder = (args.sortOrder == 'desc') ? 'desc' : 'asc';
  args.filter    = ( args.filter || "" )
      .split(',')
      .filter( nonEmptyFn )
      .map( trimFn );

  var byContributions = args.sortBy == 'contributions';
  var wantsJSON = (args.format == 'json');

  validateStrategy('layoutStrategy' , wantsJSON ? LAYOUT_JSON : LAYOUT_TABLE );
  validateStrategy('sortStrategy'   , sprintf(SORT_STRATEGY, byContributions ? args.sortOrder : args.sortBy));
  validateStrategy('filterStrategy' , FILTER_STRATEGY);

  return args
}

/**
 * Use specified strategy path or calculate the full path
 * then load the strategy using `require()`
 */
function validateStrategy(strategy, strategySrc) {
  var fullPath = args[strategy] = args[strategy] || path.join(lib, strategySrc);
  if ( fs.existsSync( fullPath  )) {
    args[strategy] = require( fullPath  );
    return true;
  }
  throw new Error( sprintf('Invalid %s "%s".', strategy, fullPath ) );
}
